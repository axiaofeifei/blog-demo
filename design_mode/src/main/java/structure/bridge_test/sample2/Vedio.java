/**
 * @Author hehongfei
 * @Description
 * @Date 2022/12/26 9:05
 */

package structure.bridge_test.sample2;

/*
抽象实现灵活 : 抽象 和 具体实现 之间 , 需要 增加更多灵活性 的情况下 , 适合使用桥接模式 ;
        使用 桥接模式 , 可以 避免在这两个层次之间 , 建立静态的继承关系 , 通过 桥接模式 在二者之间建立 关联关系 ;
        抽象 和 实现 都可以 各自 以继承的方式扩展 , 互不影响 ;
        可以动态的 将 抽象 的子类对象 和 实现 的子类对象 进行组合 , 在系统中 , 抽象 和 实现 之间进行了解耦 ;

        独立变化维度 : 一个类存在 2 22 个或更多的 独立变化维度 , 并且这些维度都需要 独立扩展 ;
        抽象部分可以 独立扩展 , 具体实现的部分 , 也可以独立扩展 ;

        不使用继承 : 不希望使用继承 , 或 因多层继承导致系统类的个数增加 ;
*/

/*
业务逻辑场景 : 开发跨平台的视频播放器 , 平台有 Android , iOS , Windows , Linux , Mac , 播放器支持的格式有 MP4 , AVI , RMVB , FLV 格式 ; 这种情况下 , 适合使用桥接模式 ;

        平台 : 播放器支持 Linux , Android 平台 ;
        视频格式 : 播放器支持 MP4 , FLV 视频格式 ;

        这里分为两块 , 一块是平台 , 一块是视频格式 ;
        平台可以不断的扩展 , 如 : Windows , iOS , MAC , 嵌入式平台 ;
        视频类型也可以不断的扩展 , 如 : H264 , H265 , MPEG 等 ;
        二者可以随着自己的层级进行扩展 ;

        桥接模式 最重要的是 将 抽象 与 实现 解耦 , 通过组合 在 抽象 与 实现 之间搭建桥梁 ;
 */
public interface Vedio {
    /**
     * 打开视频
     *      可以打开 MP4 / FLV 格式视频
     *      视频 ( 格式 ) 是个 抽象
     * @return
     */
    Vedio openVedio();

    /**
     * 查看视频信息
     */
    void showVedio();

}
